==============================================
Managing widgets in Graphical User Interfaces.
==============================================

:abstract:
    The `widget` package is designed to create and manipulate the Graphical
    User Interface (GUI) in a `PyGame`_ project.  Unlike many other GUI packages
    for PyGame, the present package is not trying to 'run the show' by having
    its own main loop and event system.  The widgets are PyGame sprites,
    smart enough to take care of themselves most of the time, and on which the
    developer keeps a total control.

:public:
    This document does not dive into implementation details.  As such, it can
    be read by developers as well as anyone curious to understand how the
    widgets behave in the project.

:prerequisite:
    None.

.. contents:: Index

How are the widgets placed inside each other?
=============================================

The widgets form a tree.
------------------------

In a GUI, the widgets are placed in other widgets.  They end up forming a
tree.

* An widget that can contain one or more other widgets is called a
  `container`.
* The widgets contained in a container are called its `children`.
* The container of a child is called its `parent`.

A child can only have 0 or 1 parent, never more.

For example::

    screen
     :. window "Connect to server."
     :   :. vertical box
     :       :. label "Server IP:"
     :       :. text area
     :       :. label "Server port:"
     :       :. text area
     :       :. horizontal box
     :           :. button
     :           :   :. label "Cancel."
     :           :. button
     :               :. label "OK."
     :. window "Error."
         :. vertical box
             :. label "Could not reach server."
             :. button
                 :. label "OK."

In this example, `screen` is a container widget.  It contains two children: the
two `window` widgets.  `screen` is the parent of these `window` widgets.  Each
`window` is also a container, both are parents of one child: a `vertical box`.
`screen` is also the `root` of that tree.

Note:

    The order in which the windows are added to the screen does not need to
    match the order in which they are displayed (and therefore which one
    appears to be 'on top'): the user should be able to switch between windows.

How to add an child widget to a container widget?
---------------------------------------------------

The widgets are added into containers with their `addChild` method.

The order in which the widgets are added into each other does not matter::

    window.addChild(button, ...)
    button.addChild(label, ...)

is equivalent to::

    button.addChild(label, ...)
    window.addChild(button, ...)

Containers let you choose the place where you add the new child.  For
example, one may want the labels in a vertical box to appear in alphabetical
order.  The child can be placed at the beginning, the end, at a given position,
or before or after another child.

The effect of adding a child is immediately visible on screen unless a
`batch mode` is activated, in which case the screen will wait for the batch
mode to be de-activated in order to update.

How to remove an child widget from a container widget?
------------------------------------------------------

Containers have a method `removeChild` that takes a child as a parameter.  It
removes the child from the container.

The effect of removing a child is immediately visible on screen unless a
`batch mode` is activated, in which case the screen will wait for the batch
mode to be de-activated in order to update.


How to calculate the sizes and positions of the widgets?
========================================================

Principle.
----------

The automatic process of calculating and assigning sizes and positions is
called `size negotiation`.  It takes place in two steps:

1. `size requisition`:
    * The size requisition of an widget is done with the `requestSize` method
      of that widget.  It takes no parameter.  Each widget has a layout,
      and that layout knows how to compute the size for this widget.
    * The widget computes the size it needs to display its content.
    * The widget remembers the size it requests.
    * If the widget is a container, then it will often request the size of its
      children (with their own `requestSize` method) before computing its own.
2. `size allocation`:
    * The size allocation of an widget is done with the `allocateSize` method
      of that widget.  It takes a size and a position as a parameter.  Each
      widget has a layout, and that layout knows how to allocate the size and
      position for this widget.
    * The allocated size can, but does not need to, equal the requested size.
    * Whatever size the widget has requested, it MUST obey and conform to the
      allocated size.  There is NO exception.  The use of layouts such as
      `scroll` can protect you from the cluttering that could happen when too
      many widgets have to share too little a surface.
    * The widget remembers the size and position that is allocated to it.
    * If the widget is a container, it derives an allocated size and position
      for each of its children.  Then it calls `allocateSize` of each child
      with these derived allocated size and position.

Example.
--------

The three following lines are enough to negotiate the sizes and positions of
all the widgets of a window::

    window.requestSize()
    allocated_size = SizeAllocation((50, 60), (500, 300))
    window.allocateSize(allocated_size)

In the previous example, the window is placed on the position x=50 y=60,
and its size is width=500 and height=300.  If we want to let the window free
of choosing its own size::

    window.requestSize()
    allocated_size = SizeAllocation((50, 60), window.requested_size)
    window.allocateSize(allocated_size)


How to draw the widgets on the screen?
======================================

There is no need to draw the widgets yourself.  Once the size negotiation is
over, it is enough to call screen.update() once.  Then, each time a widget is
added, removed or modified, it will be automatically redrawn.

Redrawing a modified widget does not always require a complete redraw of the
whole GUI.  If the modified widget keeps its size, then only a few widgets
(the widget itself, the window that contains it, the screen) are redrawn.  When
a size changes, then a size negotiation mechanism is called once again,
recreating all the images that need to be recreated, and redrawing everything
that needs to be redrawn.

This work is done by methods such as `askForRedraw`, `askForUpdate` or 
`askForSizeNegotiation` that transmit the wish of the widget from parent to
parent, and each parent that feels concerned by it acts on it.

Since it is useless to redraw the GUI several times between two frames [#]_,
all the GUI modification requests that occur between two frames are merged into
one (`batch mode`).


How to modify the widgets?
==========================

Beyond adding and removing children to and from containers, the GUI can be
modified by changing the aspects of widgets.  A button looks different when
it is pressed.  The text of a label can change and so can its color.  A window
can be moved to another position, etc..

Widgets provide methods for modifying their content and appearance:

* label.setText("%i sec before explosion" % time_left)
* button.setMode('pressed')
* window.moveTo(150, 25)
* scroll.scrollTo(0, 200)


How does the user interact with the widgets ?
=============================================

This package does not provide any tool for having the widgets react the the
mouse, keyboard, joypad, touchscreen or wiimote.  Providing such a
functionality would mean creating a system of events, and therefore imposing
it to the developer, reducing drastically the reusability of the package.
Instead, the developers are free to use any event manager they like.


Further readings.
=================

* package `layout` for the mechanisms of children, containers and size
  negotiation.
* package `sprite` for the rendering of the widgets using PyGame.


References and footnotes.
=========================

.. _PyGame: http://www.pygame.org
.. [#] frame: an image sent to the display.  It is the same frame than in the
       expression "50 frames per second".
 